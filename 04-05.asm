Палиндромом назовем число, десятичная запись которого читается одинаково слева направо и справа налево. 
Существует следующее утверждение, называемое "Гипотеза о палиндромах": возьмем натуральное число и сложим его с числом, 
полученным выписыванием цифр исходного числа в обратном порядке. Проделаем то же действие с полученной суммой и будем повторять до тех пор, 
пока не получится палиндром. В гипотезе предполагается, что на каком-то шаге обязательно получится палиндром.

На стандартном потоке ввода задаются целое беззнаковое 32-битное число M и целое неотрицательное число N. 
Требуется проверить, получится ли в результате N шагов метода, предложенного в "Гипотезе о палиндромах", из числа M получить палиндром.

Если в результате ровно N шагов получился палиндром, на стандартный поток вывода в первой строке напечатайте "Yes", 
а во второй - полученный палиндром. Иначе, напечатайте "No". Если на шаге с номером, меньшим, чем N, 
палиндром был получен, но получившееся после N шагов число — не палиндром, то правильным ответом является No.

Указание: использовать массивы запрещается. Решайте задачу в предположении, 
что при вычислении промежуточных результатов переполнений целочисленной арифметики не возникает (входные данные корректны).

Указание: определите вспомогательную функцию, например, функцию разворота числа в десятичной записи.


%include "io.inc"
section .bss
    n resd 1
section .text
global CMAIN
CMAIN:
    GET_UDEC 4, esi
    GET_UDEC 4, edi
STRT:
    cmp edi, 0
    je END
    mov dword[n], esi
    push esi
    call F
    add esp, 4
    mov esi, dword[n]
    add esi, eax
    dec edi
    jmp STRT
END:   
    mov dword[n], esi      
    push esi
    call F
    add esp, 4
    mov esi, dword[n]
    cmp eax, esi
    je T
    PRINT_STRING "No"
    jmp Fl
T:
    PRINT_STRING "Yes"
    NEWLINE
    PRINT_UDEC 4, esi
Fl:
    xor eax, eax
    ret
    
F:
    push ebp
    mov ebp, esp
    push esi
    mov eax, dword[ebp + 8]
    mov ecx, 0
    mov esi, 10
ST:
    cmp eax, 0
    je EN
    imul ecx, esi
    mov edx, 0
    div esi
    add ecx, edx
    jmp ST
EN:
    mov eax, ecx
    pop ebp
    pop esi
    ret
